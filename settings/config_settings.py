import streamlit as st
import importlib.util
from pathlib import Path
import json

CONFIG_PATH = Path("config.py")

def _load_config_module():
    spec = importlib.util.spec_from_file_location("cfgmod", CONFIG_PATH)
    mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(mod)
    return mod

def _write_config(subjects, classes, modules, submodules, materials):
    # Regenerate config.py deterministically
    content = [
        "# Auto-generated by Config Settings submenu\n",
        f"subjects = {json.dumps(subjects, ensure_ascii=False, indent=4)}\n",
        f"classes = {json.dumps(classes, ensure_ascii=False, indent=4)}\n",
        "# level_options removed or unused; keep if needed\n",
        "level_options = []  # kept for backward compatibility\n\n",
        f"modules = {json.dumps(modules, ensure_ascii=False, indent=4)}\n\n",
        "submodules = " + json.dumps(submodules, ensure_ascii=False, indent=4) + "\n\n",
        f"materials = {json.dumps(materials, ensure_ascii=False, indent=4)}\n",
    ]
    CONFIG_PATH.write_text("".join(content), encoding="utf-8")

def _csv_to_list(text):
    return [x.strip() for x in text.split(",") if x.strip()]

def render():
    st.subheader("Full Configuration (config.py)")
    if not CONFIG_PATH.exists():
        st.error("config.py not found.")
        return []

    cfg = _load_config_module()

    subjects = list(getattr(cfg, "subjects", []))
    classes = list(getattr(cfg, "classes", []))
    modules = list(getattr(cfg, "modules", []))
    submodules = dict(getattr(cfg, "submodules", {}))
    materials = list(getattr(cfg, "materials", []))

    st.markdown("### Subjects")
    subj_edit = st.text_area("Subjects (comma separated)", ", ".join(subjects))
    st.markdown("### Classes")
    class_edit = st.text_area("Classes (comma separated)", ", ".join(classes))
    st.markdown("### Materials")
    materials_edit = st.text_area("Materials (comma separated)", ", ".join(materials))

    st.markdown("### Modules & Submodules")
    # Editable modules order
    mods_edit = st.text_area("Modules (comma separated, determines order)", ", ".join(modules))
    updated_submodules = {}
    temp_modules = _csv_to_list(mods_edit) or []
    for m in temp_modules:
        current_list = submodules.get(m, [])
        edit = st.text_area(f"Submodules for '{m}' (comma separated)", ", ".join(current_list), key=f"subs_{m}")
        updated_submodules[m] = _csv_to_list(edit)

    col_save, col_reset = st.columns(2)
    messages = []
    if col_save.button("Save All Config"):
        new_subjects = _csv_to_list(subj_edit)
        new_classes = _csv_to_list(class_edit)
        new_materials = _csv_to_list(materials_edit)
        _write_config(
            new_subjects,
            new_classes,
            temp_modules,
            updated_submodules,
            new_materials
        )
        messages.append(("success", "Configuration saved. Restart app to reload module cache."))

    if col_reset.button("Reload From File"):
        st.experimental_rerun()

    st.caption("Note: After saving, a restart may be required for other modules to see changes.")
    return messages