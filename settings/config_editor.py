import streamlit as st
import importlib.util
from pathlib import Path
import json
from settings.teachers import render as teachers_render
from settings.vacations import vacations_menu  # NEW

CONFIG_PATH = Path("config.py")

def _load_config():
    if not CONFIG_PATH.exists():
        return {
            "subjects": [],
            "classes": [],
            "modules": [],
            "submodules": {},
            "materials": [],
        }
    spec = importlib.util.spec_from_file_location("cfgmod", CONFIG_PATH)
    mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(mod)
    return {
        "subjects": list(getattr(mod, "subjects", [])),
        "classes": list(getattr(mod, "classes", [])),
        "modules": list(getattr(mod, "modules", [])),
        "submodules": dict(getattr(mod, "submodules", {})),
        "materials": list(getattr(mod, "materials", [])),
    }

def _write_config(cfg):
    content = [
        "# Auto-generated by settings.config_editor\n",
        f"subjects = {json.dumps(cfg['subjects'], ensure_ascii=False, indent=4)}\n\n",
        f"classes = {json.dumps(cfg['classes'], ensure_ascii=False, indent=4)}\n\n",
        "level_options = []  # kept only for backward compatibility; unused\n\n",
        f"modules = {json.dumps(cfg['modules'], ensure_ascii=False, indent=4)}\n\n",
        "submodules = " + json.dumps(cfg['submodules'], ensure_ascii=False, indent=4) + "\n\n",
        f"materials = {json.dumps(cfg['materials'], ensure_ascii=False, indent=4)}\n",
    ]
    CONFIG_PATH.write_text("".join(content), encoding="utf-8")

def _csv_list(txt):
    return [x.strip() for x in txt.split(",") if x.strip()]

def render():
    messages = []
    def add_msg(level, text): messages.append((level, text))

    cfg = _load_config()

    # New tab layout: Teachers first, then each list in its own tab
    tabs = st.tabs(["Teachers", "Subjects", "Classes", "Materials", "Modules", "Submodules", "Vacations"])

    # --- Teachers Tab ---
    with tabs[0]:
        t_msgs = teachers_render()
        if isinstance(t_msgs, list):
            messages.extend(t_msgs)

    # --- Subjects Tab ---
    with tabs[1]:
        st.caption("Edit subjects list. Comma separated.")
        subj_text = st.text_area("Subjects", ", ".join(cfg["subjects"]), height=120, key="subjects_edit")
        if st.button("Save Subjects"):
            cfg["subjects"] = _csv_list(subj_text)
            _write_config(cfg)
            add_msg("success", "Subjects saved.")

    # --- Classes Tab ---
    with tabs[2]:
        st.caption("Edit classes list. Comma separated.")
        classes_text = st.text_area("Classes", ", ".join(cfg["classes"]), height=120, key="classes_edit")
        if st.button("Save Classes"):
            cfg["classes"] = _csv_list(classes_text)
            _write_config(cfg)
            add_msg("success", "Classes saved.")

    # --- Materials Tab ---
    with tabs[3]:
        st.caption("Edit materials list. Comma separated.")
        materials_text = st.text_area("Materials", ", ".join(cfg["materials"]), height=120, key="materials_edit")
        if st.button("Save Materials"):
            cfg["materials"] = _csv_list(materials_text)
            _write_config(cfg)
            add_msg("success", "Materials saved.")

    # --- Modules Tab ---
    with tabs[4]:
        st.caption("Edit modules list (order matters). Comma separated.")
        modules_text = st.text_area("Modules", ", ".join(cfg["modules"]), height=120, key="modules_edit")
        if st.button("Save Modules"):
            new_modules = _csv_list(modules_text)
            # Prune submodules for removed modules; keep existing for retained
            new_submodules = {m: cfg["submodules"].get(m, []) for m in new_modules}
            cfg["modules"] = new_modules
            cfg["submodules"] = new_submodules
            _write_config(cfg)
            add_msg("success", "Modules saved (submodules pruned to current modules).")

    # --- Submodules Tab ---
    with tabs[5]:
        if not cfg["modules"]:
            st.info("No modules defined. Add modules first.")
        else:
            st.caption("Define submodules for each module (comma separated).")
            updated_subs = {}
            for m in cfg["modules"]:
                existing = cfg["submodules"].get(m, [])
                edit = st.text_area(f"{m} submodules", ", ".join(existing), height=80, key=f"subs_{m}")
                updated_subs[m] = _csv_list(edit)
            if st.button("Save All Submodules"):
                cfg["submodules"] = updated_subs
                _write_config(cfg)
                add_msg("success", "Submodules saved.")

    # --- Vacations Tab ---
    with tabs[6]:
        v_msgs = vacations_menu()
        if isinstance(v_msgs, list):
            messages.extend(v_msgs)

    return messages